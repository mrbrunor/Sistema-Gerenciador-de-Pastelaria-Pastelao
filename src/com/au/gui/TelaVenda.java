/*
 * Copyright (C) 2014 BrunoRicardo
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.au.gui;

import com.au.gui.incompletas.TelaReimprimirRelatorio;
import com.au.gui.tmodel.VendaTableModel;
import com.au.bean.Caixa;
import com.au.bean.Funcionario;
import com.au.bean.ItemPedido;
import com.au.bean.Pedido;
import com.au.bean.Produto;
import com.au.dao.CaixaDao;
import com.au.dao.PedidoDao;
import com.au.dao.ProdutoDao;
import com.au.util.Clock;
import com.au.util.LimitaDigitos;
import com.au.util.MonitorImpressora;
import com.au.util.setarIcone;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Time;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Tiago
 */
public class TelaVenda extends javax.swing.JFrame implements ListSelectionListener {

    private Caixa caixa;
    private final Funcionario funcionario;
    private VendaTableModel tableModelVenda;
    private final TabelaPesquisaActionListener listener2;
    private Pedido pedido = new Pedido();
    private double totalPedido = 0;
    private Integer idCaixa = null;
    private boolean numeroPedidoVerificado = false;
    private int numPedido = 1;
    private int auxOrdemProduto = 1;

    /**
     * Creates new form TelaVenda
     *
     * @param funcionario
     */
    public TelaVenda(Funcionario funcionario) {
        this.funcionario = funcionario;
        initComponents();
        listener2 = new TabelaPesquisaActionListener(this);
        campoBusca.setDocument(new LimitaDigitos((250), "[^a-zA-Z À-ÄÈ-ËÌ-ÏÒ-ÖÙ-Üà-äè-ëì-ïò-öù-ü0-9]"));
        campoAdicionarItem.setDocument(new LimitaDigitos((6), "[^0-9]"));
        textoNomeFuncionario.setText(funcionario.getNomeFunc());
        this.setExtendedState(TelaVenda.MAXIMIZED_BOTH);
        inicializaTableModelVenda();
        inicializaData();
        idCaixa = verificaCaixa();
        if (funcionario.getNivelFunc() == 0) {
            menuCadastros.setEnabled(false);
            MenuRelatorio.setEnabled(false);
            abrirCaixa();
        } else if (idCaixa == null) {
            caixaFechado();
        }
        campoAdicionarItem.requestFocus();
        setarIcone i = new setarIcone(this);

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent event) {
                new MonitorImpressora().fechaImpressora();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelSuperior = new javax.swing.JPanel();
        textoFotoFuncionario = new javax.swing.JLabel();
        textoNomeFuncionario = new javax.swing.JLabel();
        textoData = new javax.swing.JLabel();
        textoHora = new javax.swing.JLabel();
        Thread t = new Clock(textoHora);
        t.start();
        botaoAlternarUsuario = new javax.swing.JButton();
        botaoCaixa = new javax.swing.JButton();
        painelPedido = new javax.swing.JPanel();
        textoDigiteParaAdicionar = new javax.swing.JLabel();
        botaoAdicionarItem = new javax.swing.JButton();
        campoAdicionarItem = new javax.swing.JTextField();
        campoAdicionarItem.setActionCommand("Adicionar Item");
        botaoFecharPedido = new javax.swing.JButton();
        botaoCancelarPedido = new javax.swing.JButton();
        painelScrollTabelaPedido = new javax.swing.JScrollPane();
        tabelaPedido = new javax.swing.JTable();
        botaoExcluirItem = new javax.swing.JButton();
        textoValorTotal = new javax.swing.JLabel();
        painelBusca = new javax.swing.JPanel();
        textoDigiteParaBuscar = new javax.swing.JLabel();
        campoBusca = new javax.swing.JTextField();
        campoBusca.setActionCommand("Buscar");
        botaoBuscar = new javax.swing.JButton();
        painelScrollTabelaBusca = new javax.swing.JScrollPane();
        tabelaBusca = new javax.swing.JTable();
        botaoAdicionarAoPedido = new javax.swing.JButton();
        barraMenu = new javax.swing.JMenuBar();
        menuPrincipal = new javax.swing.JMenu();
        itemMenuAbrirCaixa = new javax.swing.JMenuItem();
        itemMenuFecharCaixa = new javax.swing.JMenuItem();
        itemMenuCancelarCupom = new javax.swing.JMenuItem();
        itemMenuReimprimirCupom = new javax.swing.JMenuItem();
        itemMenuRetiradaDeCaixa = new javax.swing.JMenuItem();
        itemMenuVisualizarCaixas = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        itemMenuTrocarSenha = new javax.swing.JMenuItem();
        itemMenuDeslogar = new javax.swing.JMenuItem();
        itemMenuSair = new javax.swing.JMenuItem();
        menuCadastros = new javax.swing.JMenu();
        itemMenuFormaPagamento = new javax.swing.JMenuItem();
        itemMenuFuncionarios = new javax.swing.JMenuItem();
        itemMenuIngredientes = new javax.swing.JMenuItem();
        itemMenuProdutos = new javax.swing.JMenuItem();
        MenuRelatorio = new javax.swing.JMenu();
        itemMenuVendasGerais = new javax.swing.JMenuItem();
        itemMenuVendasFiltradasFormaPgto = new javax.swing.JMenuItem();
        MenuAjuda = new javax.swing.JMenu();
        itemMenuSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema Pastelão - Vendas");

        painelSuperior.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        textoFotoFuncionario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/au/resources/icons/user-64.png"))); // NOI18N

        textoNomeFuncionario.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        textoNomeFuncionario.setText("Nome do Funcionário");

        textoData.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        textoData.setText("DATA");
        textoData.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        textoHora.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        textoHora.setText("HORA");

        botaoAlternarUsuario.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        botaoAlternarUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/au/resources/icons/logout-32.png"))); // NOI18N
        botaoAlternarUsuario.setText("Deslogar");
        botaoAlternarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAlternarUsuarioActionPerformed(evt);
            }
        });

        botaoCaixa.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        botaoCaixa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/au/resources/icons/moneybox-32.png"))); // NOI18N
        botaoCaixa.setText("Abrir Caixa");
        botaoCaixa.setToolTipText("Clique aqui para fechar o caixa");
        botaoCaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCaixaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelSuperiorLayout = new javax.swing.GroupLayout(painelSuperior);
        painelSuperior.setLayout(painelSuperiorLayout);
        painelSuperiorLayout.setHorizontalGroup(
            painelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSuperiorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textoFotoFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelSuperiorLayout.createSequentialGroup()
                        .addComponent(textoNomeFuncionario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textoData))
                    .addGroup(painelSuperiorLayout.createSequentialGroup()
                        .addComponent(botaoAlternarUsuario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoCaixa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textoHora)))
                .addContainerGap())
        );
        painelSuperiorLayout.setVerticalGroup(
            painelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSuperiorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelSuperiorLayout.createSequentialGroup()
                        .addGroup(painelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textoData)
                            .addComponent(textoNomeFuncionario))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textoHora)
                            .addGroup(painelSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(botaoAlternarUsuario)
                                .addComponent(botaoCaixa)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(textoFotoFuncionario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        painelPedido.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Pedido"));

        textoDigiteParaAdicionar.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        textoDigiteParaAdicionar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textoDigiteParaAdicionar.setText("Digite o código do produto para inserir no pedido:");

        botaoAdicionarItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botaoAdicionarItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/au/resources/icons/add_list-26.png"))); // NOI18N
        botaoAdicionarItem.setText("Adicionar Item");
        botaoAdicionarItem.setToolTipText("Clique aqui para adicionar o produto ao pedido");
        botaoAdicionarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAdicionarItemActionPerformed(evt);
            }
        });

        campoAdicionarItem.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        campoAdicionarItem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                campoAdicionarItemFocusGained(evt);
            }
        });
        campoAdicionarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoAdicionarItemActionPerformed(evt);
            }
        });

        botaoFecharPedido.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botaoFecharPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/au/resources/icons/ok-32.png"))); // NOI18N
        botaoFecharPedido.setText("Fechar Pedido");
        botaoFecharPedido.setToolTipText("Clique aqui para finalizar o pedido e selecionar a forma de pagamento");
        botaoFecharPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoFecharPedidoActionPerformed(evt);
            }
        });

        botaoCancelarPedido.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botaoCancelarPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/au/resources/icons/cancel-32.png"))); // NOI18N
        botaoCancelarPedido.setText("Cancelar Pedido");
        botaoCancelarPedido.setToolTipText("Clique aqui para cancelar o pedido atual");
        botaoCancelarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarPedidoActionPerformed(evt);
            }
        });

        tabelaPedido.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        tabelaPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod", "Descrição", "Valor Unitario", "Quantidade", "Valor Total"
            }
        ));
        painelScrollTabelaPedido.setViewportView(tabelaPedido);
        if (tabelaPedido.getColumnModel().getColumnCount() > 0) {
            tabelaPedido.getColumnModel().getColumn(0).setMaxWidth(35);
            tabelaPedido.getColumnModel().getColumn(2).setMaxWidth(75);
            tabelaPedido.getColumnModel().getColumn(3).setMaxWidth(75);
            tabelaPedido.getColumnModel().getColumn(4).setMaxWidth(75);
        }

        botaoExcluirItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/au/resources/icons/minus-26.png"))); // NOI18N
        botaoExcluirItem.setToolTipText("Clique aqui para excluir este item do pedido");
        botaoExcluirItem.setActionCommand("Remover Item");
        botaoExcluirItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExcluirItemActionPerformed(evt);
            }
        });

        textoValorTotal.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        textoValorTotal.setText("Valor Total: 0,00");

        javax.swing.GroupLayout painelPedidoLayout = new javax.swing.GroupLayout(painelPedido);
        painelPedido.setLayout(painelPedidoLayout);
        painelPedidoLayout.setHorizontalGroup(
            painelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPedidoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelPedidoLayout.createSequentialGroup()
                        .addComponent(textoDigiteParaAdicionar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(campoAdicionarItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoAdicionarItem, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painelPedidoLayout.createSequentialGroup()
                        .addComponent(painelScrollTabelaPedido)
                        .addGap(18, 18, 18)
                        .addComponent(botaoExcluirItem))
                    .addGroup(painelPedidoLayout.createSequentialGroup()
                        .addComponent(textoValorTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(botaoCancelarPedido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoFecharPedido)))
                .addContainerGap())
        );
        painelPedidoLayout.setVerticalGroup(
            painelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPedidoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoDigiteParaAdicionar)
                    .addComponent(campoAdicionarItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoAdicionarItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(painelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelScrollTabelaPedido, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                    .addGroup(painelPedidoLayout.createSequentialGroup()
                        .addComponent(botaoExcluirItem)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(painelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoFecharPedido)
                    .addComponent(botaoCancelarPedido)
                    .addComponent(textoValorTotal))
                .addContainerGap())
        );

        painelPedidoLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {botaoAdicionarItem, botaoCancelarPedido, botaoFecharPedido});

        painelBusca.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Busca"));

        textoDigiteParaBuscar.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        textoDigiteParaBuscar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textoDigiteParaBuscar.setText("Digite o nome do produto para buscar:");

        campoBusca.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        campoBusca.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                campoBuscaFocusGained(evt);
            }
        });

        botaoBuscar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botaoBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/au/resources/icons/search-26.png"))); // NOI18N
        botaoBuscar.setText("Buscar");
        botaoBuscar.setToolTipText("Clique aqui para buscar");

        tabelaBusca.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        tabelaBusca.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod", "Descrição", "Valor"
            }
        ));
        painelScrollTabelaBusca.setViewportView(tabelaBusca);
        if (tabelaBusca.getColumnModel().getColumnCount() > 0) {
            tabelaBusca.getColumnModel().getColumn(0).setMaxWidth(35);
            tabelaBusca.getColumnModel().getColumn(2).setMaxWidth(75);
        }

        botaoAdicionarAoPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/au/resources/icons/plus-26.png"))); // NOI18N
        botaoAdicionarAoPedido.setToolTipText("Clique aqui para adicionar este item ao pedido");
        botaoAdicionarAoPedido.setActionCommand("Adicionar Item");

        javax.swing.GroupLayout painelBuscaLayout = new javax.swing.GroupLayout(painelBusca);
        painelBusca.setLayout(painelBuscaLayout);
        painelBuscaLayout.setHorizontalGroup(
            painelBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelBuscaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelBuscaLayout.createSequentialGroup()
                        .addComponent(painelScrollTabelaBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(botaoAdicionarAoPedido))
                    .addGroup(painelBuscaLayout.createSequentialGroup()
                        .addGroup(painelBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoBusca)
                            .addComponent(textoDigiteParaBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoBuscar)))
                .addContainerGap())
        );
        painelBuscaLayout.setVerticalGroup(
            painelBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelBuscaLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(painelBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painelBuscaLayout.createSequentialGroup()
                        .addComponent(textoDigiteParaBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(botaoBuscar))
                .addGap(18, 18, 18)
                .addGroup(painelBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelScrollTabelaBusca, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                    .addGroup(painelBuscaLayout.createSequentialGroup()
                        .addComponent(botaoAdicionarAoPedido)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        botaoAdicionarAoPedido.getAccessibleContext().setAccessibleName("teste");

        barraMenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        menuPrincipal.setText("Principal");
        menuPrincipal.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        itemMenuAbrirCaixa.setText("Abrir Caixa");
        itemMenuAbrirCaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuAbrirCaixaActionPerformed(evt);
            }
        });
        menuPrincipal.add(itemMenuAbrirCaixa);

        itemMenuFecharCaixa.setText("Fechar Caixa");
        itemMenuFecharCaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuFecharCaixaActionPerformed(evt);
            }
        });
        menuPrincipal.add(itemMenuFecharCaixa);

        itemMenuCancelarCupom.setText("Cancelar Cupom");
        itemMenuCancelarCupom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuCancelarCupomActionPerformed(evt);
            }
        });
        menuPrincipal.add(itemMenuCancelarCupom);

        itemMenuReimprimirCupom.setText("Reimprimir Cupom");
        itemMenuReimprimirCupom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuReimprimirCupomActionPerformed(evt);
            }
        });
        menuPrincipal.add(itemMenuReimprimirCupom);

        itemMenuRetiradaDeCaixa.setText("Retirada de Caixa");
        itemMenuRetiradaDeCaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuRetiradaDeCaixaActionPerformed(evt);
            }
        });
        menuPrincipal.add(itemMenuRetiradaDeCaixa);

        itemMenuVisualizarCaixas.setText("Reimprimir Relatório de Caixa");
        itemMenuVisualizarCaixas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuVisualizarCaixasActionPerformed(evt);
            }
        });
        menuPrincipal.add(itemMenuVisualizarCaixas);
        menuPrincipal.add(jSeparator1);

        itemMenuTrocarSenha.setText("Trocar Senha");
        itemMenuTrocarSenha.setEnabled(false);
        menuPrincipal.add(itemMenuTrocarSenha);

        itemMenuDeslogar.setText("Deslogar");
        itemMenuDeslogar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuDeslogarActionPerformed(evt);
            }
        });
        menuPrincipal.add(itemMenuDeslogar);

        itemMenuSair.setText("Sair");
        itemMenuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuSairActionPerformed(evt);
            }
        });
        menuPrincipal.add(itemMenuSair);

        barraMenu.add(menuPrincipal);

        menuCadastros.setText("Cadastros");
        menuCadastros.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        itemMenuFormaPagamento.setText("Formas de Pagamento");
        itemMenuFormaPagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuFormaPagamentoActionPerformed(evt);
            }
        });
        menuCadastros.add(itemMenuFormaPagamento);

        itemMenuFuncionarios.setText("Funcionários");
        itemMenuFuncionarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuFuncionariosActionPerformed(evt);
            }
        });
        menuCadastros.add(itemMenuFuncionarios);

        itemMenuIngredientes.setText("Ingredientes");
        itemMenuIngredientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuIngredientesActionPerformed(evt);
            }
        });
        menuCadastros.add(itemMenuIngredientes);

        itemMenuProdutos.setText("Produtos");
        itemMenuProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuProdutosActionPerformed(evt);
            }
        });
        menuCadastros.add(itemMenuProdutos);

        barraMenu.add(menuCadastros);

        MenuRelatorio.setText("Relatórios");
        MenuRelatorio.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        itemMenuVendasGerais.setText("Vendas Gerais");
        itemMenuVendasGerais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuVendasGeraisActionPerformed(evt);
            }
        });
        MenuRelatorio.add(itemMenuVendasGerais);

        itemMenuVendasFiltradasFormaPgto.setText("Vendas por  Forma de Pagamento");
        itemMenuVendasFiltradasFormaPgto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuVendasFiltradasFormaPgtoActionPerformed(evt);
            }
        });
        MenuRelatorio.add(itemMenuVendasFiltradasFormaPgto);

        barraMenu.add(MenuRelatorio);

        MenuAjuda.setText("Ajuda");
        MenuAjuda.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        itemMenuSobre.setText("Sobre");
        itemMenuSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuSobreActionPerformed(evt);
            }
        });
        MenuAjuda.add(itemMenuSobre);

        barraMenu.add(MenuAjuda);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelSuperior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(painelPedido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelBusca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelPedido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelBusca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void campoBuscaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_campoBuscaFocusGained
        campoBusca.selectAll();
    }//GEN-LAST:event_campoBuscaFocusGained

    private void campoAdicionarItemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_campoAdicionarItemFocusGained
        campoAdicionarItem.selectAll();
    }//GEN-LAST:event_campoAdicionarItemFocusGained

    private void itemMenuFormaPagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuFormaPagamentoActionPerformed
        new TelaCadastrarFormasDePagamento(this, true).setVisible(true);
        campoAdicionarItem.requestFocus();
    }//GEN-LAST:event_itemMenuFormaPagamentoActionPerformed

    private void itemMenuFuncionariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuFuncionariosActionPerformed
        new TelaCadastrarFuncionario(this, true).setVisible(true);
        campoAdicionarItem.requestFocus();
    }//GEN-LAST:event_itemMenuFuncionariosActionPerformed

    private void itemMenuIngredientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuIngredientesActionPerformed
    }//GEN-LAST:event_itemMenuIngredientesActionPerformed

    private void itemMenuProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuProdutosActionPerformed
        new TelaCadastrarProduto(this, true).setVisible(true);
        botaoBuscar.doClick();
        campoAdicionarItem.requestFocus();
    }//GEN-LAST:event_itemMenuProdutosActionPerformed

    private void botaoAdicionarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAdicionarItemActionPerformed
        if (validaAddItem()) {
            try {
                inicializaTableModelVenda();
                adicionaItempedido();
                campoAdicionarItem.requestFocus();
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, "Este código é inválido. Por favor, insira um código válido.", "Código Inválido", JOptionPane.WARNING_MESSAGE);
                campoAdicionarItem.setText("");
                campoAdicionarItem.requestFocus();
            }
        }
    }//GEN-LAST:event_botaoAdicionarItemActionPerformed

    private void campoAdicionarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoAdicionarItemActionPerformed
        if (validaAddItem()) {
            try {
                inicializaTableModelVenda();
                adicionaItempedido();
                campoAdicionarItem.requestFocus();
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, "Este código é inválido. Por favor, insira um código válido.", "Código Inválido", JOptionPane.WARNING_MESSAGE);
                campoAdicionarItem.setText("");
                campoAdicionarItem.requestFocus();
            }
        }
    }//GEN-LAST:event_campoAdicionarItemActionPerformed

    private void botaoExcluirItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExcluirItemActionPerformed
        if (validaDelItem()) {
            removerItem();
            campoAdicionarItem.requestFocus();
        }
    }//GEN-LAST:event_botaoExcluirItemActionPerformed

    private void botaoCaixaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCaixaActionPerformed
        if ("Abrir Caixa".equals(botaoCaixa.getText())) {
            abrirCaixa();
            campoAdicionarItem.requestFocus();
        } else {
            if (fecharCaixa(idCaixa)) {
                deslogar();
            }
        }
    }//GEN-LAST:event_botaoCaixaActionPerformed

    private void botaoFecharPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoFecharPedidoActionPerformed
        if (validaPedido()) {
            fecharPedido();
            campoAdicionarItem.requestFocus();
        }
    }//GEN-LAST:event_botaoFecharPedidoActionPerformed

    private void botaoCancelarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCancelarPedidoActionPerformed
        limparPedido();
        campoAdicionarItem.requestFocus();
    }//GEN-LAST:event_botaoCancelarPedidoActionPerformed

    private void itemMenuCancelarCupomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuCancelarCupomActionPerformed
        new TelaCancelamento(this, true, idCaixa).setVisible(true);
        campoAdicionarItem.requestFocus();
    }//GEN-LAST:event_itemMenuCancelarCupomActionPerformed

    private void itemMenuReimprimirCupomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuReimprimirCupomActionPerformed
        new TelaReimpressao(this, true, idCaixa).setVisible(true);
        campoAdicionarItem.requestFocus();
    }//GEN-LAST:event_itemMenuReimprimirCupomActionPerformed

    private void itemMenuVisualizarCaixasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuVisualizarCaixasActionPerformed
        new TelaReimprimirRelatorio(this, true).setVisible(true);
        campoAdicionarItem.requestFocus();
    }//GEN-LAST:event_itemMenuVisualizarCaixasActionPerformed

    private void botaoAlternarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAlternarUsuarioActionPerformed
        deslogar();
    }//GEN-LAST:event_botaoAlternarUsuarioActionPerformed

    private void itemMenuDeslogarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuDeslogarActionPerformed
        deslogar();
    }//GEN-LAST:event_itemMenuDeslogarActionPerformed

    private void itemMenuAbrirCaixaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuAbrirCaixaActionPerformed
        abrirCaixa();
        campoAdicionarItem.requestFocus();
    }//GEN-LAST:event_itemMenuAbrirCaixaActionPerformed

    private void itemMenuFecharCaixaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuFecharCaixaActionPerformed
        if (fecharCaixa(idCaixa)) {
            deslogar();
        }
    }//GEN-LAST:event_itemMenuFecharCaixaActionPerformed

    private void itemMenuVendasGeraisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuVendasGeraisActionPerformed
        new TelaVendasGerais(this, true).setVisible(true);
        campoAdicionarItem.requestFocus();
    }//GEN-LAST:event_itemMenuVendasGeraisActionPerformed

    private void itemMenuRetiradaDeCaixaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuRetiradaDeCaixaActionPerformed
        new TelaRetirada(this, true, caixa).setVisible(true);
        campoAdicionarItem.requestFocus();
    }//GEN-LAST:event_itemMenuRetiradaDeCaixaActionPerformed

    private void itemMenuVendasFiltradasFormaPgtoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuVendasFiltradasFormaPgtoActionPerformed
        new TelaVendasPorFormaPgto(this, true).setVisible(true);
        campoAdicionarItem.requestFocus();
    }//GEN-LAST:event_itemMenuVendasFiltradasFormaPgtoActionPerformed

    private void itemMenuSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuSobreActionPerformed
        new TelaSobre(this, true).setVisible(true);
        campoAdicionarItem.requestFocus();
    }//GEN-LAST:event_itemMenuSobreActionPerformed

    private void itemMenuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuSairActionPerformed
        System.exit(1);
    }//GEN-LAST:event_itemMenuSairActionPerformed

    private void abrirCaixa() {
        if (idCaixa == null) {
            caixa = novoCaixa();
            if (caixa != null) {
                CaixaDao cDao = new CaixaDao();
                cDao.abreConnection();
                caixa.setIdCaixa(cDao.adicionaCaixa(caixa));
                cDao.fechaConnection();
                numeroPedidoVerificado = true;
                idCaixa = caixa.getIdCaixa();
                caixaAberto();
            } else {
                JOptionPane.showMessageDialog(this, "Abertura de Caixa Cancelada!", "Abertura de Caixa", JOptionPane.WARNING_MESSAGE);
                caixaFechado();
            }
        }
    }

    private void adicionaItempedido() throws NullPointerException {
        Produto produto = new Produto();
        ItemPedido itempedido = new ItemPedido();
        String padrao = "[0-9]{1,2}";
        produto.setNumProd(Integer.valueOf(campoAdicionarItem.getText()));
        ProdutoDao pDao = new ProdutoDao();
        pDao.abreConnection();
        produto = pDao.buscaCodigo(produto.getNumProd());
        pDao.fechaConnection();
        if (produto.getNumProd() == 0) {
            new TelaPastelCustomizado(this, true).setVisible(true);
            itempedido = TelaPastelCustomizado.getItemPedido();
            System.out.println(itempedido.getNomePastel());
            if (itempedido == null) {
                return;
            }
        }
        itempedido.setIdProd(produto.getIdProd());
        itempedido.setQtdProd(-1);
        while (itempedido.getQtdProd() == -1) {
            String aux = JOptionPane.showInputDialog(this, "<html><center>Digite a Quantidade para o produto:<br/><b>" + produto.getDescProd(), 1);
            if (aux == null) {
                return;
            } else if (aux.matches(padrao)) {
                itempedido.setQtdProd(Integer.valueOf(aux));
            }
        }
        verificaSeExiste(itempedido);
        if (produto.getNumProd() == 0) {
            itempedido.setTotProd(itempedido.getQtdProd() * itempedido.getTotProd());
        } else {
            itempedido.setTotProd(itempedido.getQtdProd() * produto.getValorProd());
        }
        totalPedido = totalPedido + itempedido.getTotProd();
        atualizaTotal();
        campoAdicionarItem.setText("");
        inicializaTableModelVenda();
    }

    private void atualizaTotal() {
        textoValorTotal.setText(String.format("Valor Total: %.2f", totalPedido));
    }

    private void caixaAberto() {
        botaoCaixa.setText("Fechar Caixa");
        itemMenuAbrirCaixa.setEnabled(false);
        itemMenuFecharCaixa.setEnabled(true);
        itemMenuRetiradaDeCaixa.setEnabled(true);
        itemMenuCancelarCupom.setEnabled(true);
        itemMenuReimprimirCupom.setEnabled(true);
        itemMenuVisualizarCaixas.setEnabled(true);

        campoAdicionarItem.setEnabled(true);
        campoBusca.setEnabled(true);

        botaoAdicionarAoPedido.setEnabled(true);
        botaoAdicionarItem.setEnabled(true);
        botaoBuscar.setEnabled(true);
        botaoCancelarPedido.setEnabled(true);
        botaoExcluirItem.setEnabled(true);
        botaoFecharPedido.setEnabled(true);

        tabelaBusca.setEnabled(true);
        tabelaPedido.setEnabled(true);
    }

    private void caixaFechado() {
        botaoCaixa.setText("Abrir Caixa");
        itemMenuAbrirCaixa.setEnabled(true);
        itemMenuFecharCaixa.setEnabled(false);
        itemMenuRetiradaDeCaixa.setEnabled(false);
        itemMenuCancelarCupom.setEnabled(false);
        itemMenuReimprimirCupom.setEnabled(false);
        itemMenuVisualizarCaixas.setEnabled(false);

        campoAdicionarItem.setEnabled(false);
        campoBusca.setEnabled(false);

        botaoAdicionarAoPedido.setEnabled(false);
        botaoAdicionarItem.setEnabled(false);
        botaoBuscar.setEnabled(false);
        botaoCancelarPedido.setEnabled(false);
        botaoExcluirItem.setEnabled(false);
        botaoFecharPedido.setEnabled(false);

        tabelaBusca.setEnabled(false);
        tabelaPedido.setEnabled(false);
    }

    private void deslogar() {
        new TelaLogin().setVisible(true);
        this.dispose();
    }

    private boolean fecharCaixa(Integer index) {
        new TelaFechamentoCaixa(this, true, index).setVisible(true);
        if (TelaFechamentoCaixa.isFechou()) {
            JOptionPane.showMessageDialog(this, "Caixa Fechado com Sucesso!", "Fechamento de Caixa", JOptionPane.INFORMATION_MESSAGE);
            return true;
        }
        return false;
    }

    private void fecharPedido() {
        if (numeroPedidoVerificado) {
            pedido.setNumPedido(numPedido);
            numPedido++;
        } else {
            pedido.setNumPedido(verificaNumeroPedido());
            numPedido++;
        }
        new TelaConfirmacaoPagamento(this, true, pedido, idCaixa, totalPedido).setVisible(true);
        if (TelaConfirmacaoPagamento.isPagou()) {
            TelaConfirmacaoPagamento.setPagou(false);
            limparPedido();
        } else {
            //JOptionPane.show(frm, ""); Mensagem perguntando se deseja limpar o pedido
        }
    }

    private Pedido formToVenda() {
        return pedido;
    }

    private String geraDataStr() {
        Date data = new Date();
        SimpleDateFormat formatador = new SimpleDateFormat("yyyy-MM-dd");
        return formatador.format(data);
    }

    private void inicializaTableModelVenda() {
        // Pegar os Itens Pedido
        tableModelVenda = new VendaTableModel(pedido.getItempedidos());

        tabelaPedido.setModel(tableModelVenda);
        //tabelaPedido.getSelectionModel().addListSelectionListener(this);

        tabelaPedido.getColumnModel().getColumn(0).setMaxWidth(55);
        tabelaPedido.getColumnModel().getColumn(2).setMaxWidth(85);
        tabelaPedido.getColumnModel().getColumn(2).setMinWidth(85);
        tabelaPedido.getColumnModel().getColumn(3).setMaxWidth(55);
        tabelaPedido.getColumnModel().getColumn(3).setMinWidth(55);
        tabelaPedido.getColumnModel().getColumn(4).setMaxWidth(85);
        tabelaPedido.getColumnModel().getColumn(4).setMinWidth(85);
    }

    private void inicializaData() {
        Date date = new Date();
        SimpleDateFormat formatador = new SimpleDateFormat("dd-MM-yyyy");
        textoData.setText(formatador.format(date));
    }

    private void limparPedido() {
        pedido = new Pedido();
        pedido.setItempedidos(new ArrayList<ItemPedido>());
        inicializaTableModelVenda();
        totalPedido = 0;
        auxOrdemProduto = 1;
        atualizaTotal();
        inicializaTableModelVenda();
    }

    private Caixa novoCaixa() {
        Caixa caixa2 = new Caixa();
        Date data = new Date();
        Time time = new Time(data.getTime());
        caixa2.setAberturaCaixa(time);
        caixa2.setDataAberturaCaixa(new java.sql.Date(data.getTime()));
        caixa2.setEstaAberto((byte) 1);
        caixa2.setIdFunc(funcionario.getIdFunc());
        caixa2.setFundoCaixa(0);
        String padrao = "[0-9]{1,3}";
        String msg = "Digite o valor do fundo de caixa";
        while (caixa2.getFundoCaixa() == 0) {
            String aux = JOptionPane.showInputDialog(this, msg, "Fundo de Caixa", JOptionPane.INFORMATION_MESSAGE);
            if (aux == null) {
                return null;
            } else if (aux.matches(padrao)) {
                caixa2.setFundoCaixa(Double.valueOf(aux));
            } else {
                msg = "Digite o valor do fundo de caixa, Ex.: 80";
            }
        }
        caixa2.setTotalCaixa(0);
        return caixa2;
    }

    private void removerItem() {
        if (pedido.getItempedidos().size() == 1) {
            limparPedido();
        } else if (tabelaPedido.getSelectedRow() != -1) {
            totalPedido = totalPedido - pedido.getItempedidos().get(tabelaPedido.getSelectedRow()).getTotProd();
            pedido.getItempedidos().remove(tabelaPedido.getSelectedRow());
            auxOrdemProduto = auxOrdemProduto - 1;
            atualizaTotal();
            inicializaTableModelVenda();
        }
    }

    public boolean validaAddItem() {
        boolean valida = true;
        if ("".equals(campoAdicionarItem.getText())) {
            if (validaPedido()) {
                fecharPedido();
            }
            valida = false;
        }
        return valida;
    }

    public boolean validaDelItem() {
        boolean valida = true;
        if (tabelaPedido.getSelectedRow() == -1) {
            valida = false;
            JOptionPane.showMessageDialog(this, "Selecione um item para remover!", "Selecione um item", JOptionPane.INFORMATION_MESSAGE);
            campoAdicionarItem.requestFocus();
        }
        return valida;
    }

    public boolean validaPedido() {
        boolean valida = true;
        if (tabelaPedido.getRowCount() == 0) {
            valida = false;
            JOptionPane.showMessageDialog(this, "É necessário ao menos um item no pedido para concluí-lo!", "Pedido sem Itens", JOptionPane.WARNING_MESSAGE);
            campoAdicionarItem.requestFocus();
        }
        return valida;
    }

    private void vendaToForm(ItemPedido itempedido) {
        campoAdicionarItem.setText(String.valueOf(itempedido.getIdProd()));
    }

    private Integer verificaNumeroPedido() {
        String dataStr = geraDataStr();
        numPedido = 1;
        PedidoDao pDao = new PedidoDao();
        pDao.abreConnection();
        List<Pedido> pedidos = pDao.listaPedidosPorCaixa(idCaixa);

        if (idCaixa != null && pedidos != null) {
            for (int i = 0; pedidos.size() > i; i++) {
                if (pedidos.get(i).getNumPedido() >= numPedido) {
                    numPedido = pedidos.get(i).getNumPedido();
                    numPedido++;
                }
            }
            numeroPedidoVerificado = true;
        }
        return numPedido;
    }

    private Integer verificaCaixa() {
        byte x = 1;
        String dataStr = geraDataStr();
        CaixaDao cDao = new CaixaDao();
        cDao.abreConnection();
        List<Caixa> caixas = cDao.listarCaixasDoFuncionario(funcionario.getIdFunc());
        cDao.fechaConnection();

        for (int i = 0; caixas.size() > i; i++) {
            if (String.valueOf(caixas.get(i).getDataAberturaCaixa()).equals(dataStr)) {
                caixaAberto();
                return caixas.get(i).getIdCaixa();
            } else {
                JOptionPane.showMessageDialog(this, "Você possui um caixa aberto com data anterior ao dia de hoje. \nPor favor, clique em OK para fechar o caixa anterior", "Caixa anterior encontrado", JOptionPane.WARNING_MESSAGE);
                while (!TelaFechamentoCaixa.isFechou()) {
                    fecharCaixa(caixas.get(i).getIdCaixa());

                }
                TelaFechamentoCaixa.setFechou(false);
                System.out.println("i= " + i);
            }
        }
        System.err.println("Saiu FOR");
        return null;
    }

    private void verificaSeExiste(ItemPedido itempedido) {
        for (int i = 0; i < pedido.getItempedidos().size(); i++) {
            if (pedido.getItempedidos().get(i).getIdProd() == itempedido.getIdProd()) {
                if (pedido.getItempedidos().get(i).getNomePastel() != null && itempedido.getNomePastel() != null) {
                    if (itempedido.getNomePastel().equals(pedido.getItempedidos().get(i).getNomePastel())) {
                        int aux = pedido.getItempedidos().get(i).getOrdemProduto();
                        totalPedido = totalPedido - pedido.getItempedidos().get(i).getTotProd();
                        if (itempedido.getQtdProd() == 0) {
                            if (pedido.getItempedidos().size() == 1) {
                                limparPedido();
                            } else {
                                pedido.getItempedidos().remove(i);
                            }
                        } else {
                            itempedido.setOrdemProduto(aux);
                            pedido.getItempedidos().set(i, itempedido);
                        }
                        return;
                    }
                } else {
                    int aux = pedido.getItempedidos().get(i).getOrdemProduto();
                    totalPedido = totalPedido - pedido.getItempedidos().get(i).getTotProd();
                    if (itempedido.getQtdProd() == 0) {
                        if (pedido.getItempedidos().size() == 1) {
                            limparPedido();
                        } else {
                            pedido.getItempedidos().remove(i);
                        }
                    } else {
                        itempedido.setOrdemProduto(aux);
                        pedido.getItempedidos().set(i, itempedido);
                    }
                    return;
                }
            }
        }

        if (itempedido.getQtdProd() == 0) {
            return;
        }
        itempedido.setOrdemProduto(auxOrdemProduto);
        auxOrdemProduto = auxOrdemProduto + 1;
        pedido.getItempedidos().add(itempedido);
    }

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Windows look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Windows".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(TelaVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(TelaVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(TelaVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(TelaVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new TelaVenda().setVisible(true);
//            }
//        }); 
//     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu MenuAjuda;
    private javax.swing.JMenu MenuRelatorio;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton botaoAdicionarAoPedido;
    private javax.swing.JButton botaoAdicionarItem;
    private javax.swing.JButton botaoAlternarUsuario;
    private javax.swing.JButton botaoBuscar;
    private javax.swing.JButton botaoCaixa;
    private javax.swing.JButton botaoCancelarPedido;
    private javax.swing.JButton botaoExcluirItem;
    private javax.swing.JButton botaoFecharPedido;
    private javax.swing.JTextField campoAdicionarItem;
    private javax.swing.JTextField campoBusca;
    private javax.swing.JMenuItem itemMenuAbrirCaixa;
    private javax.swing.JMenuItem itemMenuCancelarCupom;
    private javax.swing.JMenuItem itemMenuDeslogar;
    private javax.swing.JMenuItem itemMenuFecharCaixa;
    private javax.swing.JMenuItem itemMenuFormaPagamento;
    private javax.swing.JMenuItem itemMenuFuncionarios;
    private javax.swing.JMenuItem itemMenuIngredientes;
    private javax.swing.JMenuItem itemMenuProdutos;
    private javax.swing.JMenuItem itemMenuReimprimirCupom;
    private javax.swing.JMenuItem itemMenuRetiradaDeCaixa;
    private javax.swing.JMenuItem itemMenuSair;
    private javax.swing.JMenuItem itemMenuSobre;
    private javax.swing.JMenuItem itemMenuTrocarSenha;
    private javax.swing.JMenuItem itemMenuVendasFiltradasFormaPgto;
    private javax.swing.JMenuItem itemMenuVendasGerais;
    private javax.swing.JMenuItem itemMenuVisualizarCaixas;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenu menuCadastros;
    private javax.swing.JMenu menuPrincipal;
    private javax.swing.JPanel painelBusca;
    private javax.swing.JPanel painelPedido;
    private javax.swing.JScrollPane painelScrollTabelaBusca;
    private javax.swing.JScrollPane painelScrollTabelaPedido;
    private javax.swing.JPanel painelSuperior;
    private javax.swing.JTable tabelaBusca;
    private javax.swing.JTable tabelaPedido;
    private javax.swing.JLabel textoData;
    private javax.swing.JLabel textoDigiteParaAdicionar;
    private javax.swing.JLabel textoDigiteParaBuscar;
    private javax.swing.JLabel textoFotoFuncionario;
    private javax.swing.JLabel textoHora;
    private javax.swing.JLabel textoNomeFuncionario;
    private javax.swing.JLabel textoValorTotal;
    // End of variables declaration//GEN-END:variables

    @Override
    public void valueChanged(ListSelectionEvent event) {
        if (tabelaPedido.getSelectedRow() != -1) {
            ItemPedido itempedido = tableModelVenda.getItemspedido().get(tabelaPedido.getSelectedRow());
            vendaToForm(itempedido);

        }
        campoAdicionarItem.requestFocus();
    }

    public javax.swing.JButton getBotaoBuscar() {
        return botaoBuscar;
    }

    public void setBotaoBuscar(javax.swing.JButton botaoBuscar) {
        this.botaoBuscar = botaoBuscar;
    }

    public javax.swing.JTable getTabelaBusca() {
        return tabelaBusca;
    }

    public void setTabelaBusca(javax.swing.JTable tabelaBusca) {
        this.tabelaBusca = tabelaBusca;
    }

    public javax.swing.JTextField getCampoBusca() {
        return campoBusca;
    }

    public void setCampoBusca(javax.swing.JTextField campoBusca) {
        this.campoBusca = campoBusca;
    }

    public javax.swing.JTextField getCampoAdicionarItem() {
        return campoAdicionarItem;
    }

    public void setCampoAdicionarItem(javax.swing.JTextField campoAdicionarItem) {
        this.campoAdicionarItem = campoAdicionarItem;
    }
}
